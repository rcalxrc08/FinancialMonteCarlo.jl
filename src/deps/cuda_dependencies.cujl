abstract type AbstractCudaMode <: ParallelMode end
struct CudaMode <: AbstractCudaMode end

using .CUDA
include("../models/cuda/cuda_models.jl")

function set_seed(mcConfig::MonteCarloConfiguration{type1, type2, type3, type4, type5}) where {type1 <: Integer, type2 <: Integer, type3 <: AbstractMonteCarloMethod, type4 <: AbstractCudaMode, type5 <: Random.AbstractRNG}
    tmp_rng = deepcopy(mcConfig.rng)
    inner_seed!(tmp_rng, mcConfig.seed)
    mcConfig.rng = tmp_rng
    nothing
end

get_matrix_type(mcConfig::MonteCarloConfiguration{<:Integer, <:Integer, <:AbstractMonteCarloMethod, <:AbstractCudaMode, <:Random.AbstractRNG}, ::BaseProcess, price) = CuMatrix{typeof(price)}(undef, mcConfig.Nsim, mcConfig.Nstep + 1);
get_array_type(mcConfig::MonteCarloConfiguration{<:Integer, <:Integer, <:AbstractMonteCarloMethod, <:AbstractCudaMode, <:Random.AbstractRNG}, ::BaseProcess, price) = CuArray{typeof(price)}(undef, mcConfig.Nsim);
get_matrix_type(::MonteCarloConfiguration{<:Integer, <:Integer, <:AbstractMonteCarloMethod, <:AbstractCudaMode, <:Random.AbstractRNG}, ::VectorialMonteCarloProcess, price) = Array{CuMatrix{typeof(price)}};

function payoff(S::CuMatrix{num}, payoff_::PathDependentPayoff, rfCurve::AbstractZeroRateCurve, mcBaseData::AbstractMonteCarloConfiguration, T1::num2 = maturity(payoff_)) where {num <: Number, num2 <: Number}
    S_ = collect(S)

    return payoff(S_, payoff_, rfCurve, mcBaseData, T1)
end
